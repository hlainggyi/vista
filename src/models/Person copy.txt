var mongoose = require("mongoose");
var Schema = mongoose.Schema;

var personSchema = new Schema({
  company: {
    type: Schema.Types.ObjectId,
    ref: "Company",
    required: true
  },
  categories: {
    type: String,
    required: true
  },
  personInfo: {
    name: {
      mm: {
        type: String,
        required: true
      },
      jp: String
    },
    nrc: {
      type: String,
      unique: true
    },
    dob: Date,
    gender: {
      mm: String,
      jp: String
    },
    religion: {
      mm: String,
      jp: String
    },
    nation: {
      mm: String,
      jp: String
    },
    email: String,
    phoneNo: String,
    homeAddress: {
      mm: String,
      jp: String
    },
    currentAddress: {
      mm: String,
      jp: String
    },
    blood: String,
    profileImage: String
  },
  personDetail: {
    dateOfDecision: Date,
    noOfInterview: Number,
    hamPower: {
      name: String,
      mm: String,
      jp: String
    },
    tattoo: {
      name: String,
      mm: String,
      jp: String
    },
    height: Number,
    weight: Number,
    alcohol: {
      name: String,
      mm: String,
      jp: String
    },
    smoke: {
      name: String,
      mm: String,
      jp: String
    },
    livingWithPeople: {
      name: String,
      mm: String,
      jp: String
    },
    married: {
      name: String,
      mm: String,
      jp: String
    },
    self: String,
    parents: String,
    relative: String,
    bank: String,
    other: String,
    threeYearIncome: {
      mm: Number,
      jp: Number
    },
    howToUse: {
      mm: String,
      jp: String
    }
  },
  jpInfo: {
    jpLevels: [
      {
        jpLanguageLevel: String,
        certificate: {
          mm: String,
          jp: String
        },
        teachingPeriod: String,
        passed: String
      }
    ],
    familyInJapan: {
      yesno: {
        name: String,
        mm: String,
        jp: String
      },
      number: Number,
      address: {
        mm: String,
        jp: String
      },
      visaType: String
    },
    overseas: {
      yesno: {
        name: String,
        mm: String,
        jp: String
      },
      countries: String
    },
    passport: {
      yesno: {
        name: String,
        mm: String,
        jp: String
      },
      passportNo: String,
      expirationDate: String
    },
    otherLanguages: {
      yesno: {
        name: String,
        mm: String,
        jp: String
      },
      languages: String
    }
  },
  jobs: [
    {
      name: {
        mm: String,
        jp: String
      },
      businessType: {
        mm: String,
        jp: String
      },
      businessDetail: {
        mm: String,
        jp: String
      },
      jobPosition: {
        mm: String,
        jp: String
      },
      salary: {
        mm: Number,
        jp: Number
      },
      description: {
        mm: String,
        jp: String
      },
      toDate: Date,
      fromDate: Date,
      period: {
        mm: String,
        jp: String
      }
    }
  ],
  edu: {
    selectedCategory: Object,
    selectedDegree: Object,
    date: Date,
    traineeEdu: Object,
    attendanceSchool: String,
    eduStatus: {
      jp: String,
      mm: String
    },
    major: {
      mm: String,
      jp: String
    },
    achievementLevel: {
      jp: String,
      mm: String
    }
  },
  families: [
    {
      name: {
        mm: String,
        jp: String
      },
      relation: {
        mm: String,
        jp: String
      },
      age: Number,
      job: {
        mm: String,
        jp: String
      },
      income: {
        mm: Number,
        jp: Number
      },
      expense: {
        mm: Number,
        jp: Number
      }
    }
  ],
  questions: {
    n4CanYouWin: String,
    tiredness: String,
    weakness: String,
    surgeries: String,
    noOvertime: String,
    familySurgeries: String,
    workIsFast: String,
    bodybuilding: String
  },
  other: {
    advantages: {
      mm: String,
      jp: String
    },
    disadvantage: {
      mm: String,
      jp: String
    },
    personality: {
      mm: String,
      jp: String
    },
    happyTime: {
      mm: String,
      jp: String
    },
    difficultTime: {
      mm: String,
      jp: String
    }
  },
  // interviews: [{
  //   type: Schema.Types.ObjectId,
  //   ref: "Interview"
  // }],
  isActive: {
    type: Number,
    default: 1
  },
  createdUser: {
    type: Schema.Types.ObjectId,
    ref: "User"
  },
  updatedUser: {
    type: Schema.Types.ObjectId,
    ref: "User"
  },
  updated: {
    type: Date,
    // `Date.now()` returns the current unix timestamp as a number
    default: Date.now
  }
});

// module.exports = mongoose.model("Person", personSchema, "persons");
